#!/bin/bash
set -e;

APP=$2

OLDHOME=$HOME
HOME="$DOKKU_ROOT/.mariadbs"

check_exists() {
  if [[ ! -d "$DOKKU_ROOT/$APP" ]]; then
    echo "App must exist before creating mariadb storage for it"
    exit 1
  fi
}

check_app() {
  if [[ -z "$APP" ]]; then
    echo "You must specify an app name"
    exit 1
  fi
}

check_container() {
  if [[ -z "$id" ]]; then
    echo "Mariadb container not started cannot continue. Start with dokku mariadbs:start"
    exit 1
  fi
}

if [[ -f "$DOKKU_ROOT/.mariadbs/pwd" ]]; then
  admin_pass=$(cat "$DOKKU_ROOT/.mariadbs/pwd")
fi
mariadb_database="${APP}_production"

db_image=jmca/mariadb

id=$(docker ps | grep "$db_image":latest |  awk '{print $1}')
if [[ -n "$id" ]]; then
  mariadb_public_ip=$(docker port ${id} 3306 | awk '{split($0,a,":"); print a[1]}')
  mariadb_private_ip=$(docker inspect ${id} | grep IPAddress | awk '{ print $2 }' | tr -d ',"')
  mariadb_port=$(docker port ${id} 3306 | awk '{split($0,a,":"); print a[2]}')
  if [[ $mariadb_public_ip = "0.0.0.0" ]]; then
#    mariadb_public_ip=localhost
    mariadb_public_ip=$(ifconfig eth0 |grep "inet addr" |awk '{split($0,a,":"); print a[2]}'|awk '{ split($0,a," "); print a[1] }')
  fi
fi

case "$1" in
  mariadbs:create)
    check_container
    check_app
    #check_exists

    echo "Creating database $mariadb_database"
    echo "DATABASE_URL=mysql2://root:${admin_pass}@${mariadb_public_ip}:${mariadb_port}/${mariadb_database}"
    echo "CREATE DATABASE $mariadb_database;" | mysql -u root -p$admin_pass -h 127.0.0.1 mysql

    if [[ -d "$DOKKU_ROOT/$APP" ]]; then
      dokku config:set "$APP" DATABASE_URL="mysql2://root:${admin_pass}@${mariadb_public_ip}:${mariadb_port}/${mariadb_database}"
    fi

    ;;
  mariadbs:delete)
    check_container
    check_app
    #check_exists

    echo "Droping database $mariadb_database"
    echo "DROP DATABASE $mariadb_database;" | mysql -u root -p$admin_pass -h 127.0.0.1 mysql

    if [[ -d "$DOKKU_ROOT/$APP" ]]; then
      dokku config:unset "$APP" DATABASE_URL
    fi
    ;;
  mariadbs:list)
    check_container
    echo "SHOW DATABASES;" | mysql -u root -p$admin_pass -h 127.0.0.1 mysql
    ;;
  mariadbs:start)
    if [[ "$id" != "" ]]; then
      echo "Mariadb container already running with ID: ${id}"
    else
      # Generate a random password for DB user
      # Temporarily store it to a file
      if [[ ! -d $DOKKU_ROOT/.mariadbs ]]; then
          mkdir -p $DOKKU_ROOT/.mariadbs
          chown -R dokku: $DOKKU_ROOT/.mariadbs
      fi
      if [[ ! -d $DOKKU_ROOT/.mariadbs/data ]]; then
          mkdir -p $DOKKU_ROOT/.mariadbs/data
          chown -R dokku: $DOKKU_ROOT/.mariadbs/data
      fi

      if [[ ! -f $DOKKU_ROOT/.mariadbs/pwd ]]; then
        admin_pass=$(< /dev/urandom tr -dc A-Za-z0-9 | head -c 16)
        echo $admin_pass > "$DOKKU_ROOT/.mariadbs/pwd"
      else
        admin_pass=$(cat "$DOKKU_ROOT/.mariadbs/pwd")
      fi
      chown dokku: "$DOKKU_ROOT/.mariadbs/pwd"
      docker run -p 3306:3306 -d -v "$DOKKU_ROOT/.mariadbs/data":/opt/mysql "$db_image" start_mariadb.sh $admin_pass
    fi
    ;;
  mariadbs:stop)
    check_container
    docker stop ${id}
    docker rm ${id}
    ;;
  mariadbs:status)
    if [[ "$id" != "" ]]; then
      echo "Mariadb container running with ID: ${id}"
    else
      echo "Mariadb container not running"
    fi
    ;;
  help)
    cat && cat<<EOF
    mariadbs:create <app> Create a MariaDB database
    mariadbs:delete <app> Delete specified MariaDB database
    mariadbs:start        Start the MariaDB docker container if it isn't running
    mariadbs:stop         Stop the MariaDB docker container
    mariadbs:status       Shows status of Mariadb
    mariadbs:list         List all databases
EOF
    ;;
esac
